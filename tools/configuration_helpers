#!/bin/bash

set -u

# Set the ROOT environment variable, assuming that the directory structure
# mirrors that of the git repository.
ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../" >/dev/null 2>&1 && pwd)"
export ROOT

# =============================================================================
# User-configurable environment variables
# =============================================================================
#
# Configuration environment variables that intended to allow the user to modify
# the behaviour of the run_session script by overriding the default values.
# This function should be called at least one time before any script or
# function that uses these variables is executed. 1 = true, 0 = false.
#
# We prefix a select few environment variables that could potentially conflict
# with someone's development environment with 'ROOT_'.
# =============================================================================

set_local_configuration() {

    # The chunk of code below allows environment variables to be set with a
    # .env file
    if [ -f .env ]; then
        echo ".env file detected:" "$(pwd)/.env"
        echo "Loading environment variables from it."
        export $(grep -v '^#' .env | xargs)
    fi
}

# Detect the OS, set some useful environment variables.
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macOS detected."
        export MACOS_MINOR_VERSION=$(sw_vers -productVersion | cut -d '.' -f2)

        # We set the path to MacPorts so that users don't necessarily need to
        # mess with their ~/.bash_profile.
        # Setting the environment variable IGNORE_MACPORTS to be 1 disables
        # this (useful for testing and debugging Homebrew-related errors on
        # machines that have both Homebrew and MacPorts.
        if (( ${IGNORE_MACPORTS:-0} )); then
            echo "IGNORE_MACPORTS is set to 1, so we will ignore the existing"\
                 "MacPorts installation and proceed with Homebrew."
        else
            export PATH="$PATH:/opt/local/bin:/opt/local/sbin"
        fi

        # Checking if MacPorts is present.
        export MACPORTS_FOUND=`[ -x "$(command -v port)" ]; echo $?`
        export HOMEBREW_FOUND=`[ -x "$(command -v brew)" ]; echo $?`

    elif [[ "$OSTYPE" == "linux-gnu" ]]; then
        echo "Linux detected."
        if [[ ! -f /etc/os-release ]]; then
            echo "The file /etc/os-release could not be found. This means that"
            " we cannot determine the Linux distro and version. Exiting now."
            exit 1
        else
            export DISTRO=$(grep 'ID=' /etc/os-release \
                            | tr -d '"' | head -n1 | cut -d '=' -f2)
            export DISTRO_MAJOR_VERSION=$(grep 'VERSION_ID=' /etc/os-release \
                                          | tr -d '"' \
                                          | cut -d '=' -f2 \
                                          | cut -d '.' -f1)
        fi
    else
        echo "OSTYPE is not darwin* or linux-gnu. Most likely this operating "\
             "system is not supported. Exiting now."
        exit 1
    fi

}

# Kobus: set_local_configuration() needs to be called before this one.
# Detect whether we are running in a continuous integration environment or not.
detect_ci() {
    # GITHUB_ACTIONS: Set to true with Github Actions is running the workflow.
    # (https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables)
    if [[ ${GITHUB_ACTIONS:-false} == true ]]; then
        export CI=1
    else
        export CI=0
    fi
}

configure_session() {
    set_local_configuration
    detect_ci
    detect_os
}
